import telebot
import configury
from telebot import types
import sqlite3
import time
from SimpleQIWI import *
from telebot.apihelper import ApiTelegramException


client = telebot.TeleBot(configury.config['token'])


db = sqlite3.connect('allusbase.db', check_same_thread = False)
sql = db.cursor()

token = "1d5599af4184a39fdf5fc3c47c7fdf74"
phone = "+79063626918"
api = QApi(token=token, phone=phone)
print(api.balance)


queue = []
admins = [984674439]
global all_deps
all_deps = 0.0
global all_vivods
all_vivods = 0.0


def admanswer(message):
    client.send_message(us_id, f'*‚úÖ–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*\n\n–û—Ç–≤–µ—Ç: {message.text}', parse_mode = "Markdown")

def questions(message):
    global us_id
    user_name = message.from_user.first_name
    us_id = message.from_user.id
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        client.send_message(message.chat.id, f'*‚úÖ–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!*', parse_mode = "Markdown")
        msg = client.send_message(984674439, f'–í–æ–ø—Ä–æ—Å –æ—Ç {user_name}\nID: {us_id}\n–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {message.text}')
        client.register_next_step_handler(msg, admanswer)

def mining(message):
    name = message.from_user.first_name
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = {user_id}"):
        ku = i[0]
        pribyl = ku/100*5
    for a in sql.execute(f"SELECT cash FROM users WHERE id = {user_id}"):
        balance = a[0]

    if not user_id in queue:
        sql.execute(f"UPDATE users SET cash = {pribyl + balance} WHERE id = {user_id}")
        db.commit()
        client.send_message(message.chat.id, f'*–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏* {pribyl}‚ÇΩ', parse_mode = "Markdown")
        queue.append(user_id)
        time.sleep(86400)
        queue.remove(user_id)
    else:
        client.send_message(message.chat.id, '–í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–æ–±–∏—Ä–∞–ª–∏ –ø—Ä–∏–±—ã–ª—å!')


#def invest_money(message):
    #msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
    #client.register_next_step_handler(msg, investrub)
def investy(message):
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        try:
            price = int(message.text)
            token = "1d5599af4184a39fdf5fc3c47c7fdf74"
            phone = "+79063626918"
            user_id = message.from_user.id
            api = QApi(token=token, phone=phone)
            db = sqlite3.connect('allusbase.db', check_same_thread = False)
            sql = db.cursor()
            comment = api.bill(price, comment = user_id)
            client.send_message(message.chat.id, f'*–î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {price} —Ä—É–±.*\n*–ù–∞ QIWI:* {phone}\n*–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{comment}')

            api.start()


            while True:
                token = "1d5599af4184a39fdf5fc3c47c7fdf74"
                phone = "+79063626918"
                api = QApi(token=token, phone=phone)
                db = sqlite3.connect('allusbase.db', check_same_thread = False)
                sql = db.cursor()
                comment = api.bill(price)

                if api.check(comment):
                    user_id = call.message.from_user.id
                    for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = {user_id}"):
                        balance = i[0]
                        break
                        sql.execute(f"UPDATE users SET cash_energy = {price + balance} WHERE id = {user_id}")
                        db.commit()
                        client.edit_message_text(chat_id = message.chat.id, message_id = message.message_id, text =  f'*‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {price} —Ä—É–±!*')
                        all_deps += price
                        username = message.from_user.username
                        if username is None:
                            client.send_message(-1001638482952, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–æ–ª–Ω–∏–ª {price}‚ÇΩ\n–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWI', parse_mode = "Markdown")
                        else:
                            client.send_message(-1001638482952, f'[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](https://t.me/{username}) –ø–æ–ø–æ–ª–Ω–∏–ª {price}‚ÇΩ*\n–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWI', parse_mode = "Markdown")

                        break


        except:
             client.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!')



def rassylka(message):
    if message.text == '–æ—Ç–º–µ–Ω–∞':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        c = sqlite3.connect("allusbase.db")
        cur = c.cursor()

        cur.execute('SELECT id FROM users')
        rows = cur.fetchall()
        for row in range(len(rows)):
            if rows[row][0] is None:
                continue
            else:
                time.sleep(1)
                client.send_message(rows[row][0], f'{message.text}')
                print(rows[row][0])
            '''try:
                time.sleep(1)
                #client.send_message(rows[row][0], str(message.text))
                print(rows[row][0])
            except:
                pass
        client.send_message(message.chat.id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        print(rows)'''
        client.send_message(984674439, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')




def vivodmoney(message):
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        pricev = message.text
        user_id = message.from_user.id
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        for i in sql.execute(f"SELECT cash FROM users WHERE id = {user_id}"):
            balance = i[0]
            break
        if balance >= 1:
            sql.execute(f"UPDATE users SET cash = {balance - balance} WHERE id = {user_id}")
            db.commit()
            user_id = message.chat.id
            commisia = balance - balance/100*3
            client.send_message(user_id, '*‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!*', parse_mode = "Markdown")
            markup_inline = types.InlineKeyboardMarkup()
            item_pay = types.InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data = 'pay')
            markup_inline.add(item_pay)
            client.send_message(-1001491637866, f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\nID: {user_id}\nQIWI: {pricev}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {commisia}', reply_markup = markup_inline)
            @client.callback_query_handler(func=lambda call: True)
            def callcheckerpay(call):
                if call.data == 'pay':
                    client.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '‚úÖ–ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞')
                    token = "1d5599af4184a39fdf5fc3c47c7fdf74"
                    phone = "+79063626918"
                    api = QApi(token=token, phone=phone)
                    commisia = balance - balance/100*3
                    api.pay(account = f"{pricev}", amount = commisia)
                    client.send_message(user_id, f'*‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–¥–æ–±—Ä–µ–Ω–∞!*\nüí∏–ù–∞ –≤–∞—à QIWI –∑–∞—á–∏—Å–ª–µ–Ω–æ *{commisia}‚ÇΩ*\n\n–ï—Å–ª–∏ –Ω–µ —Å–ª–æ–∂–Ω–æ, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∫–æ–º–∞–Ω–¥–æ–π /otzyv', parse_mode = "Markdown")
                    username = message.from_user.username
                    all_vivods += commisia
                    if username is None:
                        client.send_message(-1001638482952, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–µ–ª {commisia}‚ÇΩ\n–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWI', parse_mode = "Markdown")
                    else:
                        client.send_message(-1001638482952, f'[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](https://t.me/{username}) –≤—ã–≤–µ–ª {commisia}‚ÇΩ*\n–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWI', parse_mode = "Markdown")

        else:
            client.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ú–∏–Ω. —Å—É–º–º–∞ 1 —Ä—É–±.')

def otzovikto(message):
    text = message.text
    if message.text:
        markup_inline = types.InlineKeyboardMarkup(row_width = 1)
        item_otz = types.InlineKeyboardButton(text = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data = 'rightotz')
        item_otzbad = types.InlineKeyboardButton(text = '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data = 'badotz')
        markup_inline.add(item_otz, item_otzbad)
        client.send_message(-1001491637866, f'{text}', reply_markup = markup_inline)
        @client.callback_query_handler(func=lambda call: True)
        def callcheckerotz(call):
            if call.data == 'rightotz':
                client.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '‚úÖ–û—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!')
                client.send_message(-1001664113231, f'{text}')
            elif call.data == 'badotz':
                client.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω')


@client.message_handler(commands = ['otzyv'])
def otzovik(message):
    msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –æ—Ç–∑—ã–≤ –æ—Ç (–≤–∞—à –Ω–∏–∫–Ω–µ–π–º):\n—Å–∞–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ —Å–æ —Å–∫—Ä–∏–Ω–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω—É: @The_Brigis')
    client.register_next_step_handler(msg, otzovikto)


def registration(message):
    if message.text == '–ø—Ä–æ–ø—É—Å–∫':
        user_id = message.from_user.id
        referrer = None
        db = sqlite3.connect('allusbase.db')
        sql = db.cursor()
        name = message.from_user.first_name
        user_id = message.from_user.id
        sql.execute(f"SELECT name FROM users WHERE id = {user_id}")
        if sql.fetchone() is None:
            user_id = message.from_user.id
            name = message.from_user.first_name
            sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?)", (name, user_id, 0, 0.00, 0, None))
            db.commit()
            client.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        else:
            buttons(message)
            for value in sql.execute("SELECT * FROM users"):
                print(value)
    else:
        user_id = message.from_user.id
        referrer = int(message.text)
        db = sqlite3.connect('allusbase.db')
        sql = db.cursor()
        name = message.from_user.first_name
        user_id = message.from_user.id
        sql.execute(f'SELECT ownref FROM users WHERE id = {user_id}')
        if sql.fetchone() is None:
            sql.execute(f"SELECT name FROM users WHERE id = {user_id}")
            if sql.fetchone() is None:
                for refik in sql.execute(f'SELECT id FROM users WHERE id = {referrer}'):
                    if refik is None:
                        client.send_message(message.chat.id, '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
                        time.sleep(1)
                        register(message)
                    else:
                        user_id = message.from_user.id
                        name = message.from_user.first_name
                        sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?)", (name, user_id, 0, 0.00, 0, referrer))
                        db.commit()
                        client.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
                        for i in sql.execute(f"SELECT referals FROM users WHERE id = {referrer}"):
                            balance = i[0]
                            sql.execute(f"UPDATE users SET referals = {1 + balance} WHERE id = {referrer}")
                            db.commit()
                            client.send_message(referrer, f'*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É –ø–æ –≤–∞—à–µ–º—É –∫–æ–¥—É!*\n\nüí∏–í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.15‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞!', parse_mode = "Markdown")
                            for b in sql.execute(f"SELECT cash FROM users WHERE id = {referrer}"):
                                balance = b[0]
                                sql.execute(f"UPDATE users SET cash = {0.15 + balance} WHERE id = {referrer}")
                                db.commit()
                                break
        else:
            buttons(message)
            for value in sql.execute("SELECT * FROM users"):
                print(value)


@client.message_handler(commands = ['–ø–æ–µ—Ö–∞–ª–∏'])
def register(message):
    msg = client.send_message(message.chat.id, f'–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!\n–ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ: –ø—Ä–æ–ø—É—Å–∫')
    client.register_next_step_handler(msg, registration)





@client.message_handler(commands = ['menu'])
def buttons(message):
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item_profile = types.KeyboardButton(text = 'üë®üèª‚Äçüíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    item_factory = types.KeyboardButton(text = 'üíµ–ú–æ–π –¥–æ—Ö–æ–¥')
    item_bonus = types.KeyboardButton(text = 'üéÅ–ë–æ–Ω—É—Å')
    item_referals = types.KeyboardButton(text = 'üë•–†–µ—Ñ–µ—Ä–∞–ª—ã')
    item_techhelp = types.KeyboardButton(text = '‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    item_info = types.KeyboardButton(text = 'üìï–û –±–æ—Ç–µ')

    markup_reply.add( item_profile, item_factory, item_bonus, item_referals, item_techhelp, item_info)
    client.send_message(message.chat.id, '–ú–µ–Ω—é:',
        reply_markup = markup_reply
    )




@client.message_handler(content_types = ['text'])
def get_text(message):
    if message.text.lower() == '/start':
        client.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É! –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–±—ã–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!')
        client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –æ–±—É—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –∏–º–µ–ª –¥–µ–ª–∞ —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏')

    if message.text.lower() == '–æ–±—É—á–µ–Ω–∏–µ':
        url = 'https://t.me/joinchat/hw6npukv1684YzUy'
        client.send_message(message.chat.id, f'–í–æ—Ç —Ç–µ–±–µ —Å—Å—ã–ª–æ—á–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: {url}')
        client.send_message(message.chat.id, '–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–ø–∏—à–∏ /–ø–æ–µ—Ö–∞–ª–∏')
    if message.text == 'üë®üèª‚Äçüíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        markup_inline = types.InlineKeyboardMarkup(row_width = 1)
        item_invest = types.InlineKeyboardButton(text = 'üì§ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data = 'invest')
        item_vivod = types.InlineKeyboardButton(text = 'üì• –í—ã–≤–µ—Å—Ç–∏', callback_data = 'vivesty')
        markup_inline.add(item_invest, item_vivod)
        user_id = message.from_user.id
        name = message.from_user.first_name
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        for i in sql.execute(f'SELECT cash FROM users WHERE id = {user_id}'):
            for ab in sql.execute(f'SELECT cash_energy FROM users WHERE id = {user_id}'):
                client.send_message(message.chat.id, f'*–í–∞—à–µ –∏–º—è:* {name}\n\n*ID:* {user_id}\n\n*–í–∞—à –±–∞–ª–∞–Ω—Å:* {i[0]}‚ÇΩ\n\n*üí∏–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:* {ab[0]}‚ÇΩ\nü§ë*–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:* {all_vivods}‚ÇΩ', reply_markup = markup_inline, parse_mode = "Markdown")
                break
            
        @client.callback_query_handler(func=lambda call: True)
        def callba(call):
            if call.data == 'invest':
                msg = client.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è( - –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):')
                client.register_next_step_handler(msg, investy)
            elif call.data == 'vivesty':
                msg = client.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ (–ø—Ä–∏–º–µ—Ä: +79834519045/+34879603122)\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ -')
                client.register_next_step_handler(msg, vivodmoney)
    if message.text == 'üíµ–ú–æ–π –¥–æ—Ö–æ–¥':
        factory(message)
    if message.text == 'üéÅ–ë–æ–Ω—É—Å':
        url = 'https://t.me/rubchat'
        markup_inline = types.InlineKeyboardMarkup()
        item_stats = types.InlineKeyboardButton(text = '–ù–∞—à —á–∞—Ç', url = url)
        item_spam = types.InlineKeyboardButton(text = '–ù–∞—à –∫–∞–Ω–∞–ª', url = 'https://t.me/rubmoneychannel')
        markup_inline.add(item_stats, item_spam)
        client.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç –∏ –∫–∞–Ω–∞–ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ –±–æ–Ω—É—Å–∞–º–∏!', reply_markup = markup_inline)
    if message.text == '‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        msg = client.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞ –∏ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ - –¥–ª—è –æ—Ç–º–µ–Ω—ã:')
        client.register_next_step_handler(msg, questions)
    if message.text == '–•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞!':
        client.send_message(message.chat.id, '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ –µ–º—É: @The_Brigis')
    if message.text == '–∞–¥–º–∏–Ω–∫–∞':
        adminpanel(message)
    if message.text == 'üë•–†–µ—Ñ–µ—Ä–∞–ª—ã':
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        for ref in sql.execute(f"SELECT referals FROM users WHERE id = {message.from_user.id}"):
            numr = ref[0]
            url = f'{message.from_user.id}'
            client.send_message(message.chat.id, f'*–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* {url}\n\n–ü—Ä–∏–≤–ª–µ–∫–∞–π –ª—é–¥–µ–π –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É –∏ –ø–æ–ª—É—á–∞–π 7% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\n*–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {numr} —á–µ–ª–æ–≤–µ–∫*', parse_mode = "Markdown")
            break
    if message.text == '–°–æ–±—Ä–∞—Ç—å üí∏':
        mining(message)

    if message.text == 'üö´–ù–∞–∑–∞–¥':
        buttons(message)
    if message.text == 'üìï–û –±–æ—Ç–µ':
        token = "1d5599af4184a39fdf5fc3c47c7fdf74"
        phone = "+79063626918"
        api = QApi(token=token, phone=phone)
        markup_inlines = types.InlineKeyboardMarkup(row_width = 1)
        item_owner = types.InlineKeyboardButton(text = '–í–ª–∞–¥–µ–ª–µ—Ü', url = 'https://t.me/The_Brigis')
        item_userlogs = types.InlineKeyboardButton(text = '–í—ã–ø–ª–∞—Ç—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', url = 'https://t.me/depsandvivods')
        item_otzyvi = types.InlineKeyboardButton(text = '–û—Ç–∑—ã–≤—ã', url = 'https://t.me/otzrubmoneybot')
        item_wantbot = types.InlineKeyboardButton(text = '–•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞!', url = 'https://t.me/The_Brigis')
        markup_inlines.add(item_owner, item_userlogs, item_otzyvi, item_wantbot)
        conn = sqlite3.connect("allusbase.db")
        cursor = conn.cursor()
        row = cursor.execute(f'SELECT id FROM users').fetchone()
        amount_user_all = 0
        while row is not None:
            amount_user_all += 1
            row = cursor.fetchone()
        client.send_message(message.chat.id, f'*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:*\n\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {amount_user_all}*\n\n*–†–µ–∑–µ—Ä–≤ –ø—Ä–æ–µ–∫—Ç–∞: {api.balance[0]}‚ÇΩ*', reply_markup = markup_inlines, parse_mode = "Markdown")
    if message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        conn = sqlite3.connect("allusbase.db")
        cursor = conn.cursor()
        row = cursor.execute(f'SELECT id FROM users').fetchone()
        amount_user_all = 0
        while row is not None:
            amount_user_all += 1
            row = cursor.fetchone()
        client.send_message(message.chat.id, '‚ùï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n‚ùï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - ' + str(amount_user_all))
        conn.close()
    if message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
        msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏(–æ—Ç–º–µ–Ω–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ):')
        client.register_next_step_handler(msg, rassylka)




def adminpanel(message):
    if not message.from_user.id in admins:
        client.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
    else:
        markup_inline = types.InlineKeyboardMarkup()
        item_stats = types.InlineKeyboardButton(text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stats')
        item_spam = types.InlineKeyboardButton(text = '–†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'spam')
        markup_inline.add(item_stats, item_spam)
        client.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup = types.ReplyKeyboardRemove())
        admin_buttons = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
        item_stats = types.KeyboardButton(text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        item_spam = types.KeyboardButton(text = '–†–∞—Å—Å—ã–ª–∫–∞')
        item_back = types.KeyboardButton(text = 'üö´–ù–∞–∑–∞–¥')
        admin_buttons.add(item_stats, item_spam, item_back)
        client.send_message(message.chat.id, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup = admin_buttons)


def factory(message):
    user_id = message.from_user.id
    db = sqlite3.connect('allusbase.db', check_same_thread = False)
    sql = db.cursor()
    for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = '{user_id}'"):
        ku = i[0]
        pribyl = ku/100*5
        button_reply = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
        item_takes = types.KeyboardButton(text = '–°–æ–±—Ä–∞—Ç—å üí∏')
        item_back = types.KeyboardButton(text = 'üö´–ù–∞–∑–∞–¥')
        button_reply.add(item_takes, item_back)
        client.send_message(message.chat.id, f'*ü§ë–í–∞—à –¥–æ—Ö–æ–¥:*', parse_mode = "Markdown", reply_markup = types.ReplyKeyboardRemove())
        client.send_message(message.chat.id, f'*üí∏–í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:* {ku}‚ÇΩ\n\n*üí∏–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å:*{pribyl}‚ÇΩ', reply_markup = button_reply, parse_mode = "Markdown")


if __name__ == '__main__': # —á—Ç–æ–±—ã –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –≤–∏–¥–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∞ –Ω–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
    try:
       client.polling(none_stop=True) # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except Exception as e:
       print(e) # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
       time.sleep(15)
