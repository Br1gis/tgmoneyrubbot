import telebot
import configury
from telebot import types
import sqlite3
import time
from datetime import datetime, date, timedelta
from SimpleQIWI import *
from telebot.apihelper import ApiTelegramException
from random import randint
import traceback
import pyqiwi
import menuska
from menuska import buttons

from pyqiwip2p import QiwiP2P
from pyqiwip2p.types import QiwiCustomer, QiwiDatetime


client = telebot.TeleBot(configury.config['token'])

QIWI_PRIV_KEY = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6ImZzenY5NC0wMCIsInVzZXJfaWQiOiI3OTA2MzYyNjkxOCIsInNlY3JldCI6ImZlZjRhMTM1MDhjNjQwMzM3NzkwYzI4NGQ4ZjNkMWJmYjI5MGNjMjYxNmRiODU2M2NlZGJjN2E2YjhhNmVmZGIifX0="

p2p = QiwiP2P(auth_key=QIWI_PRIV_KEY)
now = datetime.now()

db = sqlite3.connect('allusbase.db', check_same_thread = False)
sql = db.cursor()


token = "487e928fde827febbe01257b466a7ff5"
phone = "+79063626918"
wallet = pyqiwi.Wallet(token=token, number=phone)
print(wallet.balance())

queue = []
admins = [984674439, 2049152651]
global all_deps
all_deps = 0.0
global all_vivods
all_vivods = 0.0


global gid

global gsum

global sborid

global sborsum




def endgive(message):
    if message.text == '–ò–Ω–≤–µ—Å—Ç':
        for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = {giveid}"):
            balance = i[0]
            sql.execute(f"UPDATE users SET cash_energy = {int(givesum) + balance} WHERE id = {giveid}")
            db.commit()
            client.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ!')
            client.send_message(int(giveid), f'*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {givesum}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!*', parse_mode = 'Markdown')
            break
    if message.text == '–í—ã–≤–æ–¥':
        for i in sql.execute(f"SELECT cash FROM users WHERE id = {giveid}"):
            balance = i[0]
            sql.execute(f"UPDATE users SET cash = {int(givesum) + balance} WHERE id = {giveid}")
            db.commit()
            client.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ!')
            client.send_message(int(giveid), f'*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {givesum}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞!*', parse_mode = 'Markdown')
            break


def givesum(message):
    global givesum
    givesum = message.text
    msg = client.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª—è–µ–º?')
    client.register_next_step_handler(msg, endgive)


def giveid(message):
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        global giveid
        giveid = message.text
        msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏:')
        client.register_next_step_handler(msg, givesum)



def endsbor(message):
    if message.text == '–ò–Ω–≤–µ—Å—Ç':
        for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = {sborid}"):
            balance = i[0]
            sql.execute(f"UPDATE users SET cash_energy = {balance - int(sborsum)} WHERE id = {sborid}")
            db.commit()
            client.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ!')
            client.send_message(int(sborid), f'*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±—Ä–∞–ª —É –≤–∞—Å {int(givesum)}‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!*', parse_mode = 'Markdown')
            break
    elif message.text == '–í—ã–≤–æ–¥':
        for i in sql.execute(f"SELECT cash FROM users WHERE id = {sborid}"):
            balance = i[0]
            sql.execute(f"UPDATE users SET cash = {balance - int(sborsum)} WHERE id = {sborid}")
            db.commit()
            client.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ!')
            client.send_message(int(sborid), f'*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±—Ä–∞–ª —É –≤–∞—Å {int(sborsum)}‚ÇΩ —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞!*', parse_mode = 'Markdown')
            break


def sborsum(message):
    global sborsum
    sborsum = message.text
    msg = client.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª—è–µ–º?')
    client.register_next_step_handler(msg, endsbor)


def sborid(message):
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        global sborid
        sborid = message.text
        msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏:')
        client.register_next_step_handler(msg, sborsum)



def admanswer(message):
    client.send_message(us_id, f'*‚úÖ–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!*\n\n–û—Ç–≤–µ—Ç: {message.text}', parse_mode = "Markdown")

def questions(message):
    global us_id
    user_name = message.from_user.first_name
    us_id = message.from_user.id
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        client.send_message(message.chat.id, f'*‚úÖ–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!*', parse_mode = "Markdown")
        msg = client.send_message(984674439, f'–í–æ–ø—Ä–æ—Å –æ—Ç {user_name}\nID: {us_id}\n–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {message.text}')
        client.register_next_step_handler(msg, admanswer)


#def invest_money(message):
    #msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
    #client.register_next_step_handler(msg, investrub)
def investy(message):
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        try:
            db = sqlite3.connect('allusbase.db', check_same_thread = False)
            sql = db.cursor()
            for bal in sql.execute(f'SELECT cash_energy FROM users WHERE id = {message.chat.id}'):
                global userbal
                userbal = bal[0]
                break
            global bill
            global lifetime
            price = float(message.text)
            lifetime = 30
            comment = str(message.from_user.id)

            bill = p2p.bill(amount=price, lifetime=lifetime, comment=comment)
            link_oplata = bill.pay_url
            dep_inline = types.InlineKeyboardMarkup()
            url_dep = types.InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å', url = f'{link_oplata}')
            dep_inline.add(url_dep)
            client.send_message(message.chat.id, f'*C–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: *ü•ùQIWI\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ {price}‚ÇΩ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏: 30 –º–∏–Ω—É—Ç', reply_markup = dep_inline, parse_mode = "Markdown")
            oplata_time = datetime.now() #–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            datetime_delta = oplata_time + timedelta(minutes=lifetime) #–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏.
            while True:
                db = sqlite3.connect('allusbase.db', check_same_thread = False)
                sql = db.cursor()
                status = p2p.check(bill_id=bill.bill_id).status #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
                if status == 'PAID': #–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ —Ç–æ - –¥–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –¥–æ –±–æ—Ç–∞. –í—Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–π if.
                    sql.execute(f'UPDATE users SET cash_energy = {userbal + price} WHERE id = {message.chat.id}')
                    db.commit()
                    client.send_message(message.chat.id, f'*‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {price}‚ÇΩ!*', parse_mode = "Markdown")
                    client.send_message(-1001638482952, f'*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å* –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª {price}‚ÇΩ —á–µ—Ä–µ–∑ QIWI', parse_mode = "Markdown")
                    fr = open('moneyusers.txt', 'r')
                    alliki = fr.readlines()
                    if not message.chat.id in alliki:
                        f = open('moneyusers.txt', 'a')
                        f.write(str(message.chat.id) + '\n')
                        f.close()
                        time.sleep(0.1)

                        break
                        
                    else:
                        break
                elif datetime.now() > datetime_delta: #–î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã. –¢–æ –µ—Å—Ç—å –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –º–∏–Ω—É—Ç, —Ü–∏–∫–ª –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.
                    break #–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
                    time.sleep(0.1)



        except:
            client.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!')
            print(traceback.format_exc())



def rassylka(message):
    if message.text == '–æ—Ç–º–µ–Ω–∞':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        c = sqlite3.connect("allusbase.db")
        cur = c.cursor()

        cur.execute('SELECT id FROM users')
        rows = cur.fetchall()
        for row in range(len(rows)):
            if rows[row][0] is None:
                continue
            else:
                time.sleep(1)
                client.send_message(rows[row][0], f'{message.text}', parse_mode = "Markdown")
                print(rows[row][0])
            '''try:
                time.sleep(1)
                #client.send_message(rows[row][0], str(message.text))
                print(rows[row][0])
            except:
                pass
        client.send_message(message.chat.id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        print(rows)'''
        client.send_message(984674439, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')




def vivodmoney(message):
    if message.text == '-':
        client.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    else:
        global pricev
        global user_id
        pricev = message.text
        user_id = message.from_user.id
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        for i in sql.execute(f"SELECT cash FROM users WHERE id = {user_id}"):
            global balance
            balance = i[0]
            break
        if balance >= 2:
            sql.execute(f"UPDATE users SET cash = {balance - balance} WHERE id = {user_id}")
            db.commit()
            user_id = message.chat.id
            global commisia
            commisia = balance - balance/100*3
            client.send_message(user_id, '*‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!*', parse_mode = "Markdown")
            markup_inline = types.InlineKeyboardMarkup()
            item_pay = types.InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data = 'pay')
            markup_inline.add(item_pay)
            client.send_message(-1001491637866, f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\nID: {user_id}\nQIWI: {pricev}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {commisia}', reply_markup = markup_inline)
                

        else:
            client.send_message(message.chat.id, '‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ú–∏–Ω. —Å—É–º–º–∞ 2 —Ä—É–±.')

def otzovikto(message):
    text = message.text
    if message.text:
        markup_inline = types.InlineKeyboardMarkup(row_width = 1)
        item_otz = types.InlineKeyboardButton(text = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data = 'rightotz')
        item_otzbad = types.InlineKeyboardButton(text = '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data = 'badotz')
        markup_inline.add(item_otz, item_otzbad)
        client.send_message(-1001491637866, f'{text}', reply_markup = markup_inline)
            


@client.message_handler(commands = ['otzyv'])
def otzovik(message):
    msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –æ—Ç–∑—ã–≤ –æ—Ç (–≤–∞—à –Ω–∏–∫–Ω–µ–π–º):\n—Å–∞–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞\n–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ —Å–æ —Å–∫—Ä–∏–Ω–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω—É: @The_Brigis')
    client.register_next_step_handler(msg, otzovikto)


def registration(message):
    try:
        if message.text == '–ø—Ä–æ–ø—É—Å–∫' or message.text == '–ü—Ä–æ–ø—É—Å–∫':
            user_id = message.from_user.id
            referrer = None
            db = sqlite3.connect('allusbase.db')
            sql = db.cursor()
            name = message.from_user.first_name
            user_id = message.from_user.id
            sql.execute(f"SELECT name FROM users WHERE id = {user_id}")
            if sql.fetchone() is None:
                user_id = message.from_user.id
                name = message.from_user.first_name
                sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)", (name, user_id, 0, 0.00, 0, None, 0.0))
                db.commit()
                client.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
                buttons(message)
            else:
                buttons(message)
                for value in sql.execute("SELECT * FROM users"):
                    print(value)
        else:
            user_id = message.from_user.id
            referrer = int(message.text)
            db = sqlite3.connect('allusbase.db')
            sql = db.cursor()
            name = message.from_user.first_name
            user_id = message.from_user.id
            sql.execute(f'SELECT ownref FROM users WHERE id = {user_id}')
            if sql.fetchone() is None:
                sql.execute(f"SELECT name FROM users WHERE id = {user_id}")
                if sql.fetchone() is None:
                    for refik in sql.execute(f'SELECT id FROM users WHERE id = {referrer}'):
                        if refik is None:
                            client.send_message(message.chat.id, '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
                            time.sleep(1)
                            register(message)
                        else:
                        
                            user_id = message.from_user.id
                            name = message.from_user.first_name
                            sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)", (name, user_id, 0, 0.00, 0, referrer, 0.0))
                            db.commit()
                            client.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n *–¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 0.10‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞!*', parse_mode = 'Markdown')
                            buttons(message)
                            for p in sql.execute(f'SELECT cash FROM users WHERE id = {message.chat.id}'):
                                sql.execute(f'UPDATE users SET cash = {0.1 + p[0]} WHERE id = {message.chat.id}')
                                db.commit()
                            for i in sql.execute(f"SELECT referals FROM users WHERE id = {referrer}"):
                                balance = i[0]
                                sql.execute(f"UPDATE users SET referals = {1 + balance} WHERE id = {referrer}")
                                db.commit()
                                client.send_message(referrer, f'*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É –ø–æ –≤–∞—à–µ–º—É –∫–æ–¥—É!*\n\nüí∏–í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.15‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞!', parse_mode = "Markdown")
                                for b in sql.execute(f"SELECT cash FROM users WHERE id = {referrer}"):
                                    balance = b[0]
                                    sql.execute(f"UPDATE users SET cash = {0.15 + balance} WHERE id = {referrer}")
                                    db.commit()
                                    break
                else:
                    buttons(message)
                    for value in sql.execute("SELECT * FROM users"):
                        print(value)
            else:
                buttons(message)
                for value in sql.execute("SELECT * FROM users"):
                    print(value)
    except:
        client.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /–ø–æ–µ—Ö–∞–ª–∏ –µ—â—ë —Ä–∞–∑!')


@client.message_handler(commands = ['–ø–æ–µ—Ö–∞–ª–∏'])
def register(message):
    msg = client.send_message(message.chat.id, f'–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!\n–ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ: –ø—Ä–æ–ø—É—Å–∫')
    client.register_next_step_handler(msg, registration)





@client.message_handler(commands = ['menu'])
def buttons(message):
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item_profile = types.KeyboardButton(text = 'üë®üèª‚Äçüíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    item_factory = types.KeyboardButton(text = 'üíµ–ú–æ–π –¥–æ—Ö–æ–¥')
    item_bonus = types.KeyboardButton(text = 'üéÅ–ë–æ–Ω—É—Å')
    item_plays = types.KeyboardButton(text = 'üé≤–ò–≥—Ä—ã')
    item_referals = types.KeyboardButton(text = 'üë•–†–µ—Ñ–µ—Ä–∞–ª—ã')
    item_info = types.KeyboardButton(text = 'üìï–û –±–æ—Ç–µ')

    markup_reply.add( item_profile, item_factory, item_bonus, item_plays, item_referals, item_info)
    client.send_message(message.chat.id, '–ú–µ–Ω—é:',
        reply_markup = markup_reply
    )
    





@client.message_handler(content_types = ['text'])
def get_text(message):
    if message.text.lower() == '/start':
        client.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É! –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–±—ã–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!')
        client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –æ–±—É—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –∏–º–µ–ª –¥–µ–ª–∞ —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.\n–ï—Å–ª–∏ —Ç—ã —É–∂–µ –∏–º–µ–µ—à—å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ, –Ω–∞–ø–∏—à–∏ /–ø–æ–µ—Ö–∞–ª–∏ ')

    if message.text.lower() == '–æ–±—É—á–µ–Ω–∏–µ':
        url = 'https://t.me/joinchat/hw6npukv1684YzUy'
        client.send_message(message.chat.id, f'–í–æ—Ç —Ç–µ–±–µ —Å—Å—ã–ª–æ—á–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: {url}')
        client.send_message(message.chat.id, '–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–ø–∏—à–∏ /–ø–æ–µ—Ö–∞–ª–∏')
    if message.text == 'üë®üèª‚Äçüíª–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        markup_inline = types.InlineKeyboardMarkup(row_width = 1)
        item_invest = types.InlineKeyboardButton(text = 'üì§ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data = 'invest')
        item_vivod = types.InlineKeyboardButton(text = 'üì• –í—ã–≤–µ—Å—Ç–∏', callback_data = 'vivesty')
        markup_inline.add(item_invest, item_vivod)
        user_id = message.from_user.id
        name = message.from_user.first_name
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        for i in sql.execute(f'SELECT cash FROM users WHERE id = {user_id}'):
            for ab in sql.execute(f'SELECT cash_energy FROM users WHERE id = {user_id}'):
                client.send_message(message.chat.id, f'*–í–∞—à–µ –∏–º—è:* {name}\n\n*ID:* {user_id}\n\n*–í–∞—à –±–∞–ª–∞–Ω—Å:* {round(i[0], 2)}‚ÇΩ\n\n*üí∏–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:* {ab[0]}‚ÇΩ\nü§ë*–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:* {round(all_vivods, 2)}‚ÇΩ', reply_markup = markup_inline, parse_mode = "Markdown")
                break
            
    if message.text == 'üíµ–ú–æ–π –¥–æ—Ö–æ–¥':
        factory(message)
    if message.text == 'üéÅ–ë–æ–Ω—É—Å':
        url = 'https://t.me/rubchat'
        markup_inline = types.InlineKeyboardMarkup()
        item_stats = types.InlineKeyboardButton(text = '–ù–∞—à —á–∞—Ç', url = url)
        item_spam = types.InlineKeyboardButton(text = '–ù–∞—à –∫–∞–Ω–∞–ª', url = 'https://t.me/rubmoneychannel')
        markup_inline.add(item_stats, item_spam)
        client.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç –∏ –∫–∞–Ω–∞–ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ –±–æ–Ω—É—Å–∞–º–∏!', reply_markup = markup_inline)
    #if message.text == '‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        #msg = client.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞ –∏ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ - –¥–ª—è –æ—Ç–º–µ–Ω—ã:')
        #client.register_next_step_handler(msg, questions)
    if message.text == '–•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞!':
        client.send_message(message.chat.id, '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ –µ–º—É: @The_Brigis')
    if message.text == '–∞–¥–º–∏–Ω–∫–∞':
        adminpanel(message)
    if message.text == 'üë•–†–µ—Ñ–µ—Ä–∞–ª—ã':
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        for ref in sql.execute(f"SELECT referals FROM users WHERE id = {message.from_user.id}"):
            numr = ref[0]
            url = f'{message.from_user.id}'
            client.send_message(message.chat.id, f'*–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* {url}\n\n–ü—Ä–∏–≤–ª–µ–∫–∞–π –ª—é–¥–µ–π –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É –∏ –ø–æ–ª—É—á–∞–π 0.15‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\n*–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {numr} —á–µ–ª–æ–≤–µ–∫*', parse_mode = "Markdown")
            break
    if message.text == '–°–æ–±—Ä–∞—Ç—å üí∏':
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        if not message.chat.id in queue:
            for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = {message.chat.id}"):
                ku = i[0]
                pribyl = round(ku/100*4, 3)
                for p in sql.execute(f'SELECT cash FROM users WHERE id = {message.chat.id}'):
                    sql.execute(f'UPDATE users SET cash = {pribyl + p[0]} WHERE id = {message.chat.id}')
                    db.commit()
                    client.send_message(message.chat.id, f'*–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ {pribyl}‚ÇΩ*', parse_mode = "Markdown")
                    queue.append(message.chat.id)
                    time.sleep(86400)
                    queue.remove(message.chat.id)
                
        else:
            client.send_message(message.chat.id, f'–í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–∏–±—ã–ª—å!')
            
            
        
            
            
            

    if message.text == 'üö´–ù–∞–∑–∞–¥':
        buttons(message)
    if message.text == 'üìï–û –±–æ—Ç–µ':
        token = "1d5599af4184a39fdf5fc3c47c7fdf74"
        phone = "+79063626918"
        api = QApi(token=token, phone=phone)
        markup_inlines = types.InlineKeyboardMarkup(row_width = 1)
        item_owner = types.InlineKeyboardButton(text = '–í–ª–∞–¥–µ–ª–µ—Ü', url = 'https://t.me/The_Brigis')
        item_userlogs = types.InlineKeyboardButton(text = '–í—ã–ø–ª–∞—Ç—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', url = 'https://t.me/depsandvivods')
        item_otzyvi = types.InlineKeyboardButton(text = '–û—Ç–∑—ã–≤—ã', url = 'https://t.me/otzrubmoneybot')
        item_wantbot = types.InlineKeyboardButton(text = '–•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞!', url = 'https://t.me/The_Brigis')
        markup_inlines.add(item_owner, item_userlogs, item_otzyvi, item_wantbot)
        conn = sqlite3.connect("allusbase.db")
        cursor = conn.cursor()
        row = cursor.execute(f'SELECT id FROM users')
        amount_user_all = 0
        while row is not None:
            amount_user_all += 1
            row = cursor.fetchone()
        client.send_message(message.chat.id, '‚ùï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n\n‚ùï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - ' + str(amount_user_all), reply_markup = markup_inlines)
        conn.close()
    if message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        conn = sqlite3.connect("allusbase.db")
        cursor = conn.cursor()
        row = cursor.execute(f'SELECT id FROM users').fetchone()
        amount_user_all = 0
        while row is not None:
            amount_user_all += 1
            row = cursor.fetchone()
        client.send_message(message.chat.id, '‚ùï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n‚ùï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - ' + str(amount_user_all))
        conn.close()
    if message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
        msg = client.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏(–æ—Ç–º–µ–Ω–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ):')
        client.register_next_step_handler(msg, rassylka)
    if message.text == '–í—ã–¥–∞—Ç—å üí∏':
        msg = client.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        client.register_next_step_handler(msg, giveid)
    if message.text == '–ó–∞–±—Ä–∞—Ç—å üí∏':
        msg = client.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
        client.register_next_step_handler(msg, sborid)
    if message.text == 'üé≤–ò–≥—Ä—ã':
        client.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª: üé≤–ò–≥—Ä—ã...', reply_markup = types.ReplyKeyboardRemove())
        time.sleep(2)
        markup_plays = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item_luckybox = types.KeyboardButton(text = 'üíé–ö–æ—Ä–æ–±–∫–∞ —É–¥–∞—á–∏')
        item_back = types.KeyboardButton(text = 'üö´–ù–∞–∑–∞–¥')
        markup_plays.add(item_luckybox, item_back)
        client.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±—É—é –∏–≥—Ä—É –∏–∑ –º–µ–Ω—é!', reply_markup = markup_plays)
    if message.text == 'üíé–ö–æ—Ä–æ–±–∫–∞ —É–¥–∞—á–∏':
        play_inline = types.InlineKeyboardMarkup()
        item_openbox = types.InlineKeyboardButton(text = '–ö—É–ø–∏—Ç—å –∫–æ—Ä–æ–±–∫—É', callback_data = 'paybox')
        play_inline.add(item_openbox)
        client.send_message(message.chat.id, f'*üíé–ö–æ—Ä–æ–±–∫–∞ —É–¥–∞—á–∏*\n\n*–°—É—Ç—å –∏–≥—Ä—ã:* –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∫–æ—Ä–æ–±–∫—É —É–¥–∞—á–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å—Å—è —Ä–∞–∑–Ω–∞—è —Å—É–º–º–∞ –¥–µ–Ω–µ–≥, –Ω–æ –∫–æ—Ä–æ–±–∫–∞ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –∏ –ø—É—Å—Ç–æ–π!\n*–¶–µ–Ω–∞ –∫–æ—Ä–æ–±–∫–∏:* 5‚ÇΩ', reply_markup = play_inline, parse_mode = "Markdown")
            




def adminpanel(message):
    if not message.from_user.id in admins:
        client.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
    else:
        markup_inline = types.InlineKeyboardMarkup()
        item_stats = types.InlineKeyboardButton(text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stats')
        item_spam = types.InlineKeyboardButton(text = '–†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'spam')
        markup_inline.add(item_stats, item_spam)
        client.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup = types.ReplyKeyboardRemove())
        admin_buttons = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
        item_stats = types.KeyboardButton(text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        item_spam = types.KeyboardButton(text = '–†–∞—Å—Å—ã–ª–∫–∞')
        item_gaveadm = types.KeyboardButton(text = '–í—ã–¥–∞—Ç—å üí∏')
        item_sboradm = types.KeyboardButton(text = '–ó–∞–±—Ä–∞—Ç—å üí∏')
        item_back = types.KeyboardButton(text = 'üö´–ù–∞–∑–∞–¥')
        admin_buttons.add(item_stats, item_spam, item_gaveadm, item_sboradm, item_back)
        client.send_message(message.chat.id, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup = admin_buttons)


def factory(message):
    user_id = message.from_user.id
    db = sqlite3.connect('allusbase.db', check_same_thread = False)
    sql = db.cursor()
    for i in sql.execute(f"SELECT cash_energy FROM users WHERE id = '{user_id}'"):
        ku = i[0]
        pribyl = ku/100*4
        button_reply = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
        item_take = types.KeyboardButton(text = '–°–æ–±—Ä–∞—Ç—å üí∏')
        item_back = types.KeyboardButton(text = 'üö´–ù–∞–∑–∞–¥')
        button_reply.add(item_take, item_back)
        client.send_message(message.chat.id, f'*ü§ë–í–∞—à –¥–æ—Ö–æ–¥:*', parse_mode = "Markdown", reply_markup = types.ReplyKeyboardRemove())
        client.send_message(message.chat.id, f'*üí∏–í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: * {ku}‚ÇΩ\n\n*üí∏–î–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É: * {round(pribyl/24/60, 3)}‚ÇΩ\n\n*üí∏–î–æ—Ö–æ–¥ –≤ —á–∞—Å: * {round(pribyl/24, 3)}‚ÇΩ\n\n*üí∏–î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: * {round(pribyl, 2)}‚ÇΩ', reply_markup = button_reply, parse_mode = "Markdown")
        break


@client.callback_query_handler(func=lambda call: True)
def callba(call):
    db = sqlite3.connect('allusbase.db', check_same_thread = False)
    sql = db.cursor()
    if call.data == 'invest':
        msg = client.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è( - –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):')
        client.register_next_step_handler(msg, investy)
    if call.data == 'vivesty':
        msg = client.send_message(call.message.chat.id, '–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ (–ø—Ä–∏–º–µ—Ä: 79834519045/34879603122)\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ -')
        client.register_next_step_handler(msg, vivodmoney)
    if call.data == 'pay':
        db = sqlite3.connect('allusbase.db', check_same_thread = False)
        sql = db.cursor()
        
        client.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '‚úÖ–ó–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞')
        token = "487e928fde827febbe01257b466a7ff5"
        phone = "79063626918"
        commisia = balance - balance/100*3
        client.send_message(user_id, f'*‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–¥–æ–±—Ä–µ–Ω–∞!*\nüí∏–ù–∞ –≤–∞—à QIWI –∑–∞—á–∏—Å–ª–µ–Ω–æ *{round(commisia, 2)}‚ÇΩ*\n\n–ï—Å–ª–∏ –Ω–µ —Å–ª–æ–∂–Ω–æ, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∫–æ–º–∞–Ω–¥–æ–π /otzyv', parse_mode = "Markdown")
        username = call.message.from_user.username
        wallet = pyqiwi.Wallet(token=token, number=phone)
        payment = wallet.send(pid=99, recipient=f'{pricev}', amount=commisia, comment='–í—ã–ø–ª–∞—Ç–∞ –æ—Ç: RubMoneyBot üí∏')
        for r in sql.execute(f'SELECT vivods FROM users WHERE id = {message.chat.id}'):
            balviv = r[0]
            sql.execute(f'UPDATE users SET cash = {balviv + commisia}')
            db.commit()

            client.send_message(-1001638482952, f'*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å* –≤—ã–≤–µ–ª {round(commisia, 2)}‚ÇΩ\n–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: QIWI', parse_mode = "Markdown")
            break
    if call.data == 'paybox':
        prize = randint(0, 10)
        for u in sql.execute(f'SELECT cash FROM users WHERE id = {call.message.chat.id}'):
            if u[0] > 5:
                sql.execute(f'UPDATE users SET cash = {u[0] - 5}')
                db.commit()
                sql.execute(f'UPDATE users SET cash = {prize + u[0]}')
                db.commit()
                client.send_message(call.message.chat.id, f'*üíé –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ—Ä–æ–±–∫—É, –∏ —Ç–∞–º –æ–∫–∞–∑–∞–ª–æ—Å—å: {prize}‚ÇΩ*', parse_mode = "Markdown", reply_markup = types.ReplyKeyboardRemove())
                time.sleep(1)
                buttons(call.message)
                break
            if u[0] < 5:
                client.send_message(call.message.chat.id, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–æ–±–∫–∏!')
    if call.data == 'rightotz':
        client.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '‚úÖ–û—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!')
        client.send_message(-1001664113231, f'{call.message.text}')
    if call.data == 'badotz':
        client.edit_message_text(chat_id = call.message.chat.id, message_id = call.message.message_id, text = '–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω')
                


if __name__ == '__main__': # —á—Ç–æ–±—ã –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –≤–∏–¥–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∞ –Ω–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
    try:
       client.polling(none_stop=True) # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except Exception as e:
       print(e) # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
       time.sleep(15)
